<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>最阴郁的阳光</title>
  <subtitle>I See You</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xushuo.github.io/"/>
  <updated>2017-03-24T10:03:02.330Z</updated>
  <id>https://xushuo.github.io/</id>
  
  <author>
    <name>表闹蛋蛋酱</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VUE官方教程随笔</title>
    <link href="https://xushuo.github.io/2017/03/23/VUE%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://xushuo.github.io/2017/03/23/VUE官方教程随笔/</id>
    <published>2017-03-23T03:36:54.000Z</published>
    <updated>2017-03-24T10:03:02.330Z</updated>
    
    <content type="html"><![CDATA[<p>好吧~酱酱本来在看es6的promise，偶然发现了VUE.JS,一不小心看了下大概，发现还挺有趣。所以索性就先把promise撂在一边，去官网学习下vue<em>.</em>。当然我也不确定这个会更新到什么时候，哈哈。</p>
<hr>
<h2 id="vue的安装"><a href="#vue的安装" class="headerlink" title="vue的安装"></a>vue的安装</h2><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>vue.js不支持ie8及其以下版本，支持所有兼容es5的浏览器。</p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p><code>$ npm install vue</code></p>
<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>vue.js 提供一个官方的命令行工具，可以快速搭建单页面应用，我们先用他来测试下。</p>
<pre><code># 全局安装 vue-cli
$ npm install --g vue-cli
# 创建一个基于webpack模板的项目
$ vue init webpack job
# 安装依赖
$ cd job
$ npm install 
$npm run dev
</code></pre><p><img src="/images/vue/1.png" alt=""><br>上面这个就是我初步测试的一个项目,当然这个是没有路由的，init的时候会有选项，可以产生更多的功能以及模块</p>
<h2 id="vue-js的初步体验"><a href="#vue-js的初步体验" class="headerlink" title="vue.js的初步体验"></a>vue.js的初步体验</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><pre><code>&lt;div id=&quot;app&quot;&gt;
  {{ message }}
&lt;/div&gt;

var app = new Vue({
  el: &apos;#app&apos;,
  data: {
    message: &apos;Hello Vue!&apos;
  }
})
</code></pre><p>vue提供了数据和dom的绑定，当代码更改，页面就会更新。有点类似于webpack的热加载和angularjs。</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>机智的我从官网上偷来了这个图，看起来灰常长~长~长~~~<br>所以，我就不解释了，很·清晰·<br><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p>
<h2 id="vue-js-模板语法"><a href="#vue-js-模板语法" class="headerlink" title="vue.js 模板语法"></a>vue.js 模板语法</h2><pre><code>之后我就使用官方的title了，毕竟只是随笔，摘抄总结些知识点
</code></pre><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li>文本 mustache ： <code>&lt;span&gt;Message: &lt;/span&gt;</code> </li>
<li>如果为一次性插入，则为  <code>&lt;span v-once&gt;This will never change: &lt;/span&gt;</code></li>
<li>纯html： <code>&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</code></li>
<li>文本 <code>v-text=“msg”</code> 等价于 <code></code></li>
<li>绑定属性： v-bind <code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code></li>
<li>js表达式： <code>NaN</code> <code>&lt;div v-bind:id=&quot; &#39;list&#39; +id &quot;&gt;&lt;/div&gt;</code></li>
<li>绑定事件 v-on  <code>&lt;a v-on:click=&quot;event&quot;&gt;&lt;/a&gt;</code></li>
<li><p>过滤器<br> 1.过滤器函数总是接受表达式的第一个值作为第一个参数，表达式的参数则从第二个开始。<br> 可以添加多个表达式。</p>
<p> 2.过滤器可以用到两个地方 mustache 插值以及v-bind 表达式</p>
</li>
</ul>
<pre><code>{{ item.label | filter(''123') }}
filters:{
      filter(val,arg1){
        if(!val) return &apos;&apos;;
        val=val.toString();
        return val.charAt(0).toUpperCase()+val.slice(1);
      }
    }
arg1 = 123 
</code></pre><ul>
<li>缩写 <ol>
<li>v-on  <code>&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</code></li>
<li>v-bind   <code>&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</code></li>
</ol>
</li>
</ul>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性不需要再data里声明，依赖于data里面的数据，并且自动更新。计算属性只有在它的相关依赖发生改变时才会重新求值</p>
<pre><code>&lt;h4&gt;{{ computedMsg }}&lt;/h4&gt;
computed:{
  computedMsg(){
      return this.newItem.split(&apos;&apos;).reverse().join(&apos;&apos;);
  }
}
</code></pre><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>监听items的值，当发生变化，则调用handler函数。</p>
<pre><code>watch : {
      items : {
        handler(oldVal, newVal){
          Store.save(newVal);
        },
        deep : true
      }
    },
</code></pre><h2 id="CLass与Style的绑定"><a href="#CLass与Style的绑定" class="headerlink" title="CLass与Style的绑定"></a>CLass与Style的绑定</h2><h3 id="绑定html-class"><a href="#绑定html-class" class="headerlink" title="绑定html class"></a>绑定html class</h3><h4 id="class-v-bind"><a href="#class-v-bind" class="headerlink" title="class   v-bind"></a>class   v-bind</h4><p><code>&lt;div v-bind:class=&quot;{ active: isActive }&quot;&gt;&lt;/div&gt;</code><br> class ’active‘ 的更新取决于 isActive的 true or false<br>  多个class用 逗号 ,  分隔<br> 计算属性的应用：</p>
<pre><code>&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;
data: {
  isActive: true,
  error: null
},
computed: {
  classObject: function () {
    return {
      active: this.isActive &amp;&amp; !this.error,
      &apos;text-danger&apos;: this.error &amp;&amp; this.error.type === &apos;fatal&apos;,
    }
  }
}
</code></pre><p> 多个class，数组形式表现</p>
<pre><code>&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;
data: {
  activeClass: &apos;active&apos;,
  errorClass: &apos;text-danger&apos;
}
渲染为:
&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;    
</code></pre><h4 id="style-v-bind"><a href="#style-v-bind" class="headerlink" title="style v-bind"></a>style v-bind</h4><pre><code>&lt;div v-bind:style=&quot;{ color: activeColor, fontSize: fontSize + &apos;px&apos; }&quot;&gt;&lt;/div&gt;
data: {
  activeColor: &apos;red&apos;,
  fontSize: 30
}
OR 直接绑定
&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;
data: {
  styleObject: {
    color: &apos;red&apos;,
    fontSize: &apos;13px&apos;
  }
}
</code></pre><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染   "></a>条件渲染   </h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>条件判断</p>
<pre><code>&lt;h1 v-if=&quot;ok&quot;&gt;YES&lt;/h1&gt;
&lt;h1 v-else&gt;NO&lt;/h1&gt;
</code></pre><p>切换多个元素，可以用 template</p>
<pre><code>&lt;template v-if=&quot;ok&quot;&gt;
    &lt;span&gt;s1&lt;/span&gt;
    &lt;span&gt;s2&lt;/span&gt;
&lt;/template&gt;
</code></pre><p>if = v-if<br>else if = v-else-if<br>else = v-else</p>
<h3 id="key管理可复用元素"><a href="#key管理可复用元素" class="headerlink" title="key管理可复用元素"></a>key管理可复用元素</h3><p>如果用条件语句切换同一个元素的时候，改元素将不会替换掉，只会替换掉相对应的属性。<br>如果需要替换，需要添加key</p>
<pre><code>&lt;template v-if=&quot;loginType === &apos;username&apos;&quot;&gt;
  &lt;label&gt;Username&lt;/label&gt;
  &lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&gt;
&lt;/template&gt;
&lt;template v-else&gt;
  &lt;label&gt;Email&lt;/label&gt;
  &lt;input placeholder=&quot;Enter your email address&quot; key=&quot;email-input&quot;&gt;
&lt;/template&gt;
</code></pre><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><ul>
<li>v-show 不支持 template语法</li>
<li>v-show css的属性 display的切换  v-if涉及到元素的创建以及销毁</li>
</ul>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>item in items  语法渲染  也可以用  item of items</p>
<pre><code>&lt;ul id=&quot;example-2&quot;&gt;
  &lt;li v-for=&quot;(item, index) in items&quot;&gt;
    {{ parentMessage }} - {{ index }} - {{ item.message }}
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre><ul>
<li>v-for 支持template标签</li>
<li>v-for 支持遍历对象<br>参数分别为 value key index </li>
</ul>
<pre><code>&lt;p v-for=&quot;(val, key , index) in object&quot;&gt;{{ index+" : "+key+" - "+val }}&lt;/p&gt;
</code></pre><ul>
<li>v-for支持取整数<br><code>&lt;span v-for=&quot;n in 10&quot;&gt;&lt;/span&gt;</code></li>
</ul>
<h3 id="数组变更检测"><a href="#数组变更检测" class="headerlink" title="数组变更检测"></a>数组变更检测</h3><ul>
<li>以下两种情况，vue不能检测变动而的数组<br>1.当你利用索引直接设置一个项时，例如： <code>vm.items[indexOfItem] = newValue</code><br>2.当你修改数组的长度时，例如： <code>vm.items.length = newLength</code><br>解决办法：</li>
</ul>
<pre><code>1： Vue.set(example1.items, indexOfItem, newValue)
    example1.items.splice(indexOfItem, 1, newValue)
2： example1.items.splice(newLength)
</code></pre><h2 id="时间处理器"><a href="#时间处理器" class="headerlink" title="时间处理器"></a>时间处理器</h2><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><p>v-on监听<br>也可以直接用vue的实例调用。</p>
<pre><code>var vm = new Vue({
    method:{
         hello(){
         }
    }
})；
vm.hello();
</code></pre><h2 id="表单控件绑定"><a href="#表单控件绑定" class="headerlink" title="表单控件绑定"></a>表单控件绑定</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>v-model 可以绑定文本值<br>checkbox：<code>&lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;</code><br>radio： <code>&lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot;&gt;</code><br>select： <code>&lt;select v-model=&quot;selected&quot;&gt;</code><br>v-model绑定的是标签的value<br>还可以更改绑定耳朵value。 v-bind<br><code>&lt;input  type=&quot;checkbox&quot;  v-model=&quot;toggle&quot;  v-bind:true-value=&quot;a&quot;  v-bind:false-value=&quot;b&quot; &gt;</code><br><code>&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; v-bind:value=&quot;a&quot;&gt;</code><br>过滤收尾空格： <code>&lt;input v-model.trim=&quot;msg&quot;&gt;</code></p>
<h2 id="组件-component"><a href="#组件-component" class="headerlink" title="组件 component"></a>组件 component</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>命名尽量遵守W3C规则(小写并包含一个短杠)</p>
<pre><code>#注册全局组件
Vue.component(&apos;&apos;my-componetn&apos;,{
    template: &apos;&lt;div&gt;hello&lt;/div&gt;&apos;
});
#局部注册
new Vue({
  components:{
    &apos;my-btn&apos;: {
        data(){
           return {
             id: 10
           }
         }, 
        template: &apos;&lt;button v-on:click=&quot;id++&quot;&gt;{{ id }}&lt;/button&gt;&apos;
      }
  }
})
</code></pre><h3 id="组件传递数据"><a href="#组件传递数据" class="headerlink" title="组件传递数据"></a>组件传递数据</h3><h4 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h4><p>子组件用 props 声明所需的<strong>字符串</strong>   </p>
<pre><code>Vue.component(&apos;child&apos;, {
  // 声明 props
  props: [&apos;message&apos;],
  // 就像 data 一样，prop 可以用在模板内
  // 同样也可以在 vm 实例中像 “this.message” 这样使用
  template: &apos;&lt;span&gt;{{ message }}&lt;/span&gt;&apos;
})
#传值 
&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;       
</code></pre><blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>HTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名</li>
</ul>
</blockquote>
<pre><code>Vue.component(&apos;child&apos;, {
  // camelCase in JavaScript
  props: [&apos;myMessage&apos;],
  template: &apos;&lt;span&gt;{{ myMessage }}&lt;/span&gt;&apos;
})
&lt;!-- kebab-case in HTML --&gt;
&lt;child my-message=&quot;hello!&quot;&gt;&lt;/child&gt;
</code></pre><ul>
<li>如果需要动态传值，绑定父子关系 <strong>单项绑定</strong>，则用 v-bind:my-mysssage 。</li>
<li>子组件不应该在内部改变prop。</li>
</ul>
<pre><code>① ： 定义一个局部变量，并用 prop 的值初始化它：
props: [&apos;initialCounter&apos;],
data: function () {
  return { counter: this.initialCounter }
}
② ： 定义一个计算属性，处理 prop 的值并返回。
props: [&apos;size&apos;],
computed: {
  normalizedSize: function () {
    return this.size.trim().toLowerCase()
  }
}
</code></pre><blockquote>
<p><strong>Tip:</strong> 注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。</p>
</blockquote>
<h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>   vue的事件接口</p>
<ul>
<li>$on(eventName) 监听事件</li>
<li>$emit(eventName) 触发事件</li>
</ul>
<pre><code>&lt;div id=&quot;counter-event-example&quot;&gt;
  &lt;p&gt;{{ total }}&lt;/p&gt;
  &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;
  &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;
&lt;/div&gt;
Vue.component(&apos;button-counter&apos;, {
  template: &apos;&lt;button v-on:click=&quot;increment&quot;&gt;{{ counter }}&lt;/button&gt;&apos;,
  data: function () {
    return {
      counter: 0
    }
  },
  methods: {
    increment: function () {
      this.counter += 1
      this.$emit(&apos;increment&apos;)
    }
  },
})
new Vue({
  el: &apos;#counter-event-example&apos;,
  data: {
    total: 0
  },
  methods: {
    incrementTotal: function () {
      this.total += 1
    }
  }
})
</code></pre><h4 id="非父子组件间通信"><a href="#非父子组件间通信" class="headerlink" title="非父子组件间通信"></a>非父子组件间通信</h4><ul>
<li>如果简单情况下，可以使用一个空的Vue实例作为中央事件总线</li>
</ul>
<pre><code>var bus = new Vue()
// 触发组件 A 中的事件
bus.$emit(&apos;id-selected&apos;, 1)
// 在组件 B 创建的钩子中监听事件
bus.$on(&apos;id-selected&apos;, function (id) {
  // ...
})
</code></pre><h4 id="使用slot分发内容"><a href="#使用slot分发内容" class="headerlink" title="使用slot分发内容"></a>使用slot分发内容</h4><h5 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h5><p>除非子组件模板包含至少一个 <slot> 插口，否则父组件的内容将会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。</slot></p>
<pre><code>假定 my-component 组件有下面模板：
&lt;div&gt;
  &lt;h2&gt;我是子组件的标题&lt;/h2&gt;
  &lt;slot&gt;
    只有在没有要分发的内容时才会显示。
  &lt;/slot&gt;
&lt;/div&gt;
父组件模版：
&lt;div&gt;
  &lt;h1&gt;我是父组件的标题&lt;/h1&gt;
  &lt;my-component&gt;
    &lt;p&gt;这是一些初始内容&lt;/p&gt;
    &lt;p&gt;这是更多的初始内容&lt;/p&gt;
  &lt;/my-component&gt;
&lt;/div&gt;
渲染结果：
&lt;div&gt;
  &lt;h1&gt;我是父组件的标题&lt;/h1&gt;
  &lt;div&gt;
    &lt;h2&gt;我是子组件的标题&lt;/h2&gt;
    &lt;p&gt;这是一些初始内容&lt;/p&gt;
    &lt;p&gt;这是更多的初始内容&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre><h5 id="具名slot"><a href="#具名slot" class="headerlink" title="具名slot"></a>具名slot</h5><p><slot> 元素可以用一个特殊的属性 name 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 slot 特性的元素。<br>仍然可以有一个匿名 slot ，它是默认 slot ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。</slot></p>
<pre><code>例如，假定我们有一个 app-layout 组件，它的模板为：
&lt;div class=&quot;container&quot;&gt;
  &lt;header&gt;
    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;
  &lt;/header&gt;
  &lt;main&gt;
    &lt;slot&gt;&lt;/slot&gt;
  &lt;/main&gt;
  &lt;footer&gt;
    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;
  &lt;/footer&gt;
&lt;/div&gt;
父组件模版：
&lt;app-layout&gt;
  &lt;h1 slot=&quot;header&quot;&gt;这里可能是一个页面标题&lt;/h1&gt;
  &lt;p&gt;主要内容的一个段落。&lt;/p&gt;
  &lt;p&gt;另一个主要段落。&lt;/p&gt;
  &lt;p slot=&quot;footer&quot;&gt;这里有一些联系信息&lt;/p&gt;
&lt;/app-layout&gt;
渲染结果为：
&lt;div class=&quot;container&quot;&gt;
  &lt;header&gt;
    &lt;h1&gt;这里可能是一个页面标题&lt;/h1&gt;
  &lt;/header&gt;
  &lt;main&gt;
    &lt;p&gt;主要内容的一个段落。&lt;/p&gt;
    &lt;p&gt;另一个主要段落。&lt;/p&gt;
  &lt;/main&gt;
  &lt;footer&gt;
    &lt;p&gt;这里有一些联系信息&lt;/p&gt;
  &lt;/footer&gt;
&lt;/div&gt;
</code></pre><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>is 特性。多个组件使用同一个挂载点，并且动态切换</p>
<pre><code>var vm = new Vue({
  el: &apos;#example&apos;,
  data: {
    currentView: &apos;home&apos;
  },
  components: {
    home: { /* ... */ },
    posts: { /* ... */ },
    archive: { /* ... */ }
  }
})
&lt;component v-bind:is=&quot;currentView&quot;&gt;
  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;
&lt;/component&gt;    
</code></pre><h5 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h5><p>动态切换组件的状态缓存保留</p>
<pre><code>&lt;keep-alive&gt;
  &lt;component :is=&quot;currentView&quot;&gt;
    &lt;!-- 非活动组件将被缓存！ --&gt;
  &lt;/component&gt;
&lt;/keep-alive&gt;
</code></pre><p>####编写可复用组件<br> 在编写组件时，记住是否要复用组件有好处。一次性组件跟其它组件紧密耦合没关系，但是可复用组件应当定义一个清晰的公开接口。</p>
<p> Vue 组件的 API 来自三部分 - props, events 和 slots ：   </p>
<ul>
<li>Props 允许外部环境传递数据给组件</li>
<li>Events 允许组件触发外部环境的副作用</li>
<li>Slots 允许外部环境将额外的内容组合在组件中。<br>使用 v-bind 和 v-on 的简写语法，模板的缩进清楚且简洁：  </li>
</ul>
<pre><code>&lt;my-component
  :foo=&quot;baz&quot;
  :bar=&quot;qux&quot;
  @event-a=&quot;doThis&quot;
  @event-b=&quot;doThat&quot;
&gt;
  &lt;img slot=&quot;icon&quot; src=&quot;...&quot;&gt;
  &lt;p slot=&quot;main-text&quot;&gt;Hello!&lt;/p&gt;
&lt;/my-component&gt;
</code></pre><hr>
<p>好了，经过艰苦卓绝的探索实践过程，Vue官方教程的基础篇完成了。其实组件还有一些杂项，不过大多属于心得方面的吧，以后开发可以参考。<br>经过这次Vue的探索之旅，真实良心官方教程啊。外国的坑爹教程，目不忍视。<br>不管怎么样，基础里面还有一些涉及到进阶篇的内容。之后会补充上。<br>好了，起飞！</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好吧~酱酱本来在看es6的promise，偶然发现了VUE.JS,一不小心看了下大概，发现还挺有趣。所以索性就先把promise撂在一边，去官网学习下vue&lt;em&gt;.&lt;/em&gt;。当然我也不确定这个会更新到什么时候，哈哈。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;vue的安装&quot;&gt;&lt;
    
    </summary>
    
      <category term="教程" scheme="https://xushuo.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="vue.js" scheme="https://xushuo.github.io/tags/vue-js/"/>
    
      <category term="教程" scheme="https://xushuo.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="前端" scheme="https://xushuo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>来谈谈Promise</title>
    <link href="https://xushuo.github.io/2017/03/17/%E6%9D%A5%E8%B0%88%E8%B0%88Promise/"/>
    <id>https://xushuo.github.io/2017/03/17/来谈谈Promise/</id>
    <published>2017-03-17T01:39:43.000Z</published>
    <updated>2017-03-20T01:24:42.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise——异步编程解决方案"><a href="#Promise——异步编程解决方案" class="headerlink" title="Promise——异步编程解决方案"></a>Promise——异步编程解决方案</h1><p>酱酱这段时间又学习了下nodejs，发现了promise这个神奇的东东。看了网上的几篇博文，各种思想在脑中疯狂的对战，乱的很。/(ㄒoㄒ)/~~实在没办法，希望一边写一边理解吧-。-</p>
<hr>
<h2 id="Promise的登场"><a href="#Promise的登场" class="headerlink" title="Promise的登场"></a>Promise的登场</h2><h3 id="promise是什么呢？"><a href="#promise是什么呢？" class="headerlink" title="promise是什么呢？"></a>promise是什么呢？</h3><p>因为ES6发布了，promise被列为正式规范，主流浏览器对ES6也是极大的支持，所以我们先在chrome浏览器中看下这个宝贝啥东东。<br><img src="/images/promise.png" alt=""><br>promise对象是一个构造函数，拥有all、race、reject以及resolve方法。new的新对象有catch和then方法。</p>
<h4 id="promise的状态"><a href="#promise的状态" class="headerlink" title="promise的状态"></a>promise的状态</h4><p>promise三种状态：未完成(pending),已完成(fulfilled),失败(rejected).状态之前之间不可逆转。</p>
<h4 id="promise的用法"><a href="#promise的用法" class="headerlink" title="promise的用法"></a>promise的用法</h4><pre><code>var promise = new Promise(function(resolve, reject) {  
    if (/* 异步操作成功 */){    
      resolve(value);  
    } else {  
      reject(error);   
} });
</code></pre><p>promise添加了一个函数作为参数——resolve,reject。<br>resolve函数可以将promise状态由pending-&gt;fulfilled，异步操作成功时调用。<br>reject函数可以将promise状态由pending-&gt;rejected，异步操作失败时调用。</p>
<pre><code>promise.then(resolve,reject){
} 
</code></pre><p>promise的then方法接收resolve和reject回调函数，分别为成功和失败。reject函数是可选的。<br>promise可以调用多个then方法，顺序执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Promise——异步编程解决方案&quot;&gt;&lt;a href=&quot;#Promise——异步编程解决方案&quot; class=&quot;headerlink&quot; title=&quot;Promise——异步编程解决方案&quot;&gt;&lt;/a&gt;Promise——异步编程解决方案&lt;/h1&gt;&lt;p&gt;酱酱这段时间又学习了
    
    </summary>
    
      <category term="es6" scheme="https://xushuo.github.io/categories/es6/"/>
    
    
      <category term="promise" scheme="https://xushuo.github.io/tags/promise/"/>
    
      <category term="nodejs" scheme="https://xushuo.github.io/tags/nodejs/"/>
    
      <category term="es6" scheme="https://xushuo.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>史诗级逆转——无敌巴萨</title>
    <link href="https://xushuo.github.io/2017/03/09/%E5%8F%B2%E8%AF%97%E7%BA%A7%E9%80%86%E8%BD%AC%E2%80%94%E2%80%94%E6%97%A0%E6%95%8C%E5%B7%B4%E8%90%A8/"/>
    <id>https://xushuo.github.io/2017/03/09/史诗级逆转——无敌巴萨/</id>
    <published>2017-03-09T02:49:38.000Z</published>
    <updated>2017-03-09T03:19:07.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欧冠-奇迹！95分钟绝杀-巴萨6-1巴黎惊天逆转"><a href="#欧冠-奇迹！95分钟绝杀-巴萨6-1巴黎惊天逆转" class="headerlink" title="欧冠-奇迹！95分钟绝杀 巴萨6-1巴黎惊天逆转"></a>欧冠-奇迹！95分钟绝杀 巴萨6-1巴黎惊天逆转</h2><p>北京时间3月9日03:45(西班牙当地时间8日20:45)，2016/17赛季欧冠1/8决赛次回合一场焦点战在诺坎普球场展开争夺，巴塞罗那主场6比1取胜巴黎圣日耳曼，苏亚雷斯和梅西进球，库尔扎瓦乌龙，但卡瓦尼打入关键客场进球，内马尔梅开二度，塞尔吉-罗伯托第95分钟绝杀。巴萨总分6比5涉险晋级。<br>巴萨也成为首支在欧战首回合4球落后下成功翻盘的球队。</p>
<p><img src="/images/basa.jpg" alt="&quot;比分&quot;">  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;欧冠-奇迹！95分钟绝杀-巴萨6-1巴黎惊天逆转&quot;&gt;&lt;a href=&quot;#欧冠-奇迹！95分钟绝杀-巴萨6-1巴黎惊天逆转&quot; class=&quot;headerlink&quot; title=&quot;欧冠-奇迹！95分钟绝杀 巴萨6-1巴黎惊天逆转&quot;&gt;&lt;/a&gt;欧冠-奇迹！95分钟绝杀 巴
    
    </summary>
    
      <category term="体育" scheme="https://xushuo.github.io/categories/%E4%BD%93%E8%82%B2/"/>
    
    
      <category term="巴萨" scheme="https://xushuo.github.io/tags/%E5%B7%B4%E8%90%A8/"/>
    
      <category term="足球" scheme="https://xushuo.github.io/tags/%E8%B6%B3%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>常用命令集合</title>
    <link href="https://xushuo.github.io/2017/03/07/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
    <id>https://xushuo.github.io/2017/03/07/常用命令集合/</id>
    <published>2017-03-07T05:49:04.000Z</published>
    <updated>2017-03-08T07:27:01.442Z</updated>
    
    <content type="html"><![CDATA[<p>新建一篇博客<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post <span class="string">"article title"</span></div></pre></td></tr></table></figure></p>
<p>文章编辑好之后，运行生成、部署命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g   // 生成</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d   // 部署</div></pre></td></tr></table></figure>
<p>执行下面的命令，相当于上面两条命令的效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g <span class="comment">#在部署前先生成</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      hexo对文章操作
    
    </summary>
    
      <category term="Hexo命令教程" scheme="https://xushuo.github.io/categories/Hexo%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="命令" scheme="https://xushuo.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="hexo" scheme="https://xushuo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://xushuo.github.io/2017/03/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://xushuo.github.io/2017/03/07/新的开始/</id>
    <published>2017-03-07T02:56:21.000Z</published>
    <updated>2017-03-07T02:58:59.335Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一个博客文章，新的开始。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我的第一个博客文章，新的开始。&lt;/p&gt;

    
    </summary>
    
    
      <category term="开始" scheme="https://xushuo.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xushuo.github.io/2017/03/07/hello-world/"/>
    <id>https://xushuo.github.io/2017/03/07/hello-world/</id>
    <published>2017-03-07T02:28:18.999Z</published>
    <updated>2017-03-07T02:28:18.999Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
